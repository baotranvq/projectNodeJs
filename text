// Hàm xử lý sự kiện khi nhấp vào thẻ a
            function handleLinkClick(event) {
                event.preventDefault(); // Ngăn chặn sự kiện mặc định của thẻ a (tải lại trang)
                // Lấy href từ thẻ a
                var href = event.currentTarget.getAttribute('href');
                // Thay đổi URL mà không tải lại trang
                window.history.pushState({}, '', href);
                data.forEach(product => {

                    // In ra các màu giày 
                    var colorName = product.color_name
                    let result1 = $('.product-listSmall')

                    if (!uniqueColorNames[colorName]) { // Kiểm tra xem color_name đã xuất hiện chưa
                        if (count == 0) {
                            result1.innerHTML = `
                            <a href="http://localhost:3000/products/detail/DV5141-${product.color_name}" onclick="handleLinkClick(event)">
                                <img class="tab-item border-img" src="../../.././images/products/${product.thumbnail_1}" alt="" width="80px"> 
                            </a> `
                            count = 1;
                        } else {
                            result1.innerHTML += `
                            <a  href="http://localhost:3000/products/detail/DV5141-${product.color_name}" onclick="handleLinkClick(event)">
                            <img class="tab-item" src="../../.././images/products/${product.thumbnail_1}" alt="" width="80px"> 
                            </a> `
                        }

                        uniqueColorNames[colorName] = true; // Đánh dấu color_name đã xuất hiện
                    }
                    // End in các mau giày 




                    // In ra các Size giyaf theo màu 

                    let result2 = document.getElementById('product-selectSize')
                    if (product.color_name === colorSize) {
                        if (product.quantity === 0) {
                            result2.innerHTML += `
                            <div  type="button" class="detail-size product-boxSize product-classList-size">${product.size_name}</div>  `
                        } else {
                            result2.innerHTML += `
                            <div type="button" class="detail-size product-boxSize">${product.size_name}</div>  `
                        }
                    }

                    // End in ra các Size giày 


                    // In ra thông tin shoes 

                    if (product.color_name === colorSize && !uniqueColor[colorName]) {
                        $('.product-textInfomation').innerHTML = ` <p>${product.description}</p> `
                        document.getElementById('detail-information').innerHTML = `
                            <h4>${product.product_name}</h4>
                            <span style="font-size: 16px">${product.type} Shoes</span><br>
                            <div class="detail-price">
                                ${product.promotion_price > 0 ? `<span class="detail-cardPrice">${product.price.toLocaleString('vi-VN')} đ </span>` : `<span>${product.price.toLocaleString('vi-VN')} đ </span>`}        
                                ${product.promotion_price > 0 ? `<span>${product.promotion_price.toLocaleString('vi-VN')} đ </span>` : ''} 
                            </div>  `
                        let result = document.getElementById('detail-product')
                        result.innerHTML = `
                            <div class="product-listImage">
                                    <div class="product-imageSmall">
                                        <div class="detail-img-thumbnail " id="product-image-1" type="button">
                                            <img onmouseover="hoverImg('../../.././images/products/${product.big_image_1}')" src="../../.././images/products/${product.thumbnail_1}" alt="" width="80px">
                                        </div>
                                        <div class="detail-img-thumbnail" id="product-image-2" type="botton">
                                            <img onmouseover="hoverImg('../../.././images/products/${product.big_image_2}')" src="../../.././images/products/${product.thumbnail_2}" alt="" width="80px">
                                        </div>
                                        <div class="detail-img-thumbnail" id="product-image-3" type="botton">
                                            <img onmouseover="hoverImg('../../.././images/products/${product.big_image_3}')" src="../../.././images/products/${product.thumbnail_3}" alt="" width="80px">
                                        </div>
                                        <div class="detail-img-thumbnail" id="product-image-4" type="botton">
                                            <img onmouseover="hoverImg('../../.././images/products/${product.big_image_4}')" src="../../.././images/products/${product.thumbnail_4}" alt="" width="80px">
                                        </div>
                                    </div>
                                
                                    <div class="product-imageBig">
                                        <img id="product-imageBig" src="../../.././images/products/${product.big_image_1}" alt="" width="530px" height="600px">
                                    </div>
                                </div> `
                        uniqueColor[colorName] = true;
                    }
                    // End in ra thông tin shoes 



                })

                
            }

///////////////
Khi bạn muốn kết hợp việc lưu trữ dữ liệu giỏ hàng cả trong cơ sở dữ liệu và session, và muốn khôi phục giỏ hàng từ cơ sở dữ liệu khi người dùng đăng nhập lại, bạn cần thực hiện một số bước cụ thể. Dưới đây là cách bạn có thể thực hiện điều này:

Bước 1: Khi Người Dùng Đăng Nhập
Kiểm tra Đăng Nhập:

Khi người dùng đăng nhập, kiểm tra xác thực và xác định người dùng đó (ví dụ: lấy thông tin người dùng từ cơ sở dữ liệu).
Lưu thông tin người dùng vào session để duy trì phiên làm việc.
Kiểm tra Giỏ Hàng Trong Session:

Nếu có dữ liệu giỏ hàng trong session, hãy kiểm tra xem có cần phải đồng bộ dữ liệu với cơ sở dữ liệu hay không.
Đồng Bộ Dữ Liệu:

Nếu giỏ hàng trong session khác với dữ liệu trong cơ sở dữ liệu, hãy cập nhật cơ sở dữ liệu với thông tin giỏ hàng mới từ session.
Bước 2: Khi Người Dùng Đăng Xuất
Lưu Trữ Dữ Liệu Giỏ Hàng:

Trước khi đăng xuất, lưu trữ thông tin giỏ hàng từ session vào cơ sở dữ liệu nếu có sự thay đổi.
Xóa Session và Đăng Xuất:

Xóa thông tin người dùng khỏi session.
Đăng xuất người dùng.
Bước 3: Khi Người Dùng Đăng Nhập Lại
Kiểm tra Đăng Nhập:

Khi người dùng đăng nhập lại, kiểm tra xác thực và xác định người dùng đó (ví dụ: lấy thông tin người dùng từ cơ sở dữ liệu).
Lưu thông tin người dùng vào session để duy trì phiên làm việc.
Lấy Dữ Liệu Giỏ Hàng Từ Cơ Sở Dữ Liệu:

Lấy thông tin giỏ hàng từ cơ sở dữ liệu dựa trên thông tin người dùng đã đăng nhập.
Cập Nhật Session:

Cập nhật session với dữ liệu giỏ hàng mới từ cơ sở dữ liệu.



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="path/to/bootstrap.css"> <!-- Thay đường dẫn bằng đường dẫn thực tế đến file Bootstrap CSS (nếu sử dụng) -->
    <script defer src="path/to/bootstrap.bundle.min.js"></script> <!-- Thay đường dẫn bằng đường dẫn thực tế đến file Bootstrap JS (nếu sử dụng) -->
    <script defer src="your-script.js"></script>
    <title>Quantity Update</title>
</head>
<body>

<div>
    <button onclick="decreaseQuantity()"><i class="bi bi-dash"></i></button>
    <input type="text" id="quantityInput" onchange="updateQuantity()">
    <button onclick="increaseQuantity()"><i class="bi bi-plus"></i></button>
</div>

<script>
    // Khởi tạo object với trường số lượng
    const item = { quantity: 10 }; // Thay đổi giá trị số lượng tùy theo yêu cầu

    // Function giảm số lượng
    function decreaseQuantity() {
        const inputElement = document.getElementById('quantityInput');
        let quantity = parseInt(inputElement.value) || 0;
        quantity = Math.max(0, quantity - 1); // Giảm số lượng, không bao giờ âm
        inputElement.value = quantity;
    }

    // Function tăng số lượng
    function increaseQuantity() {
        const inputElement = document.getElementById('quantityInput');
        let quantity = parseInt(inputElement.value) || 0;
        quantity = Math.min(item.quantity, quantity + 1); // Tăng số lượng, không vượt quá số lượng trong object
        inputElement.value = quantity;
    }

    // Function cập nhật số lượng khi nhập vào ô input
    function updateQuantity() {
        const inputElement = document.getElementById('quantityInput');
        let quantity = parseInt(inputElement.value) || 0;
        quantity = Math.min(item.quantity, Math.max(0, quantity)); // Giới hạn số lượng trong khoảng hợp lý
        inputElement.value = quantity;
    }
</script>

</body>
</html>



// Gọi hàm model với await
const result = await new Promise((resolve, reject) => {
    models.createGsCheckout(data, (err, result) => {
        if (err) reject(err);
        resolve(result);
    });
});
